name: "CI CD actions"
on:
  push:
    tags:
      - 'v*'
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'

permissions:
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}:latest
  CONTAINER_NAME: algoscalc-back-raven
  VOLUME_NAME: algoscalc-back-raven-logs

jobs:
  test:
    name: Unit testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Run tests
        run: |
          source .venv/bin/activate
          poetry run coverage run -m pytest
          poetry run coverage xml -i
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
  sonarcloud:
    name: SonarCloud code analyze
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.ref_type == 'branch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  lint:
    name: Code style check
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: TrueBrain/actions-flake8@v2
        with:
          only_warn: 1
          max_line_length: 88
          extra_arguments: "--max-complexity=10" 
  build:
    name: Docker image build
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}
  deploy:
    name: App deploy
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get the version
        id: get_short_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
      - name: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SANDBOX_HOST }}
          username: ${{ secrets.SANDBOX_USER }}
          key: ${{ secrets.SANDBOX_KEY }}
          port: ${{ secrets.SANDBOX_PORT }}
          script: |
            docker logout;
            docker pull ${{ env.IMAGE_NAME }};
            docker rm -f ${{ env.CONTAINER_NAME }} || true;
            docker run -d \
              -v ${{ env.VOLUME_NAME }}:/app/logs/ \
              -e EXECUTE_TIMEOUT=5 \
              -e VERSION=raven-${{ steps.get_short_sha.outputs.SHORT_SHA }} \
              --restart=always \
              --name ${{ env.CONTAINER_NAME }} \
              --network ${{ secrets.SANDBOX_NETWORK }} \
              ${{ env.IMAGE_NAME }};
